#[include timelapse.cfg]


# Custom homing functionality
[gcode_macro G28]
rename_existing: G990028
description: Home printer (Always Y axis first, then X axis)
gcode:
  {% set do_x = 0 %}
  {% set do_y = 0 %}
  {% set do_z = 0 %}

  {% if params.Y is defined %}
    ## for y home just y
    {% set do_y = 1 %} 
  {% endif %}

  {% if params.X is defined %}
    ## for x home y first then X
    {% set do_x = 1 %} 
    {% set do_y = 1 %} 
  {% endif %}

  {% if params.Z is defined %}
    ## for z home just z
    {% set do_z = 1 %} 
  {% endif %}


  {% if do_y == 1 %}
    RESPOND PREFIX="info" MSG="Home > Todo: Y"
  {% endif %}
  {% if do_x == 1 %}
    RESPOND PREFIX="info" MSG="Home > Todo: X"
  {% endif %}
  {% if do_z == 1 %}
    RESPOND PREFIX="info" MSG="Home > Todo: Z"
  {% endif %}

  {% if do_x == 0 and do_y == 0 and do_z == 0 %}
    {% set do_x = 1 %} 
    {% set do_y = 1 %} 
    {% set do_z = 1 %} 
    RESPOND PREFIX="info" MSG="Home > Doing all XYZ"
  {% endif %}

  {% if do_x == 1 or do_y == 1 or do_z == 1 %}
    RESPOND PREFIX="info" MSG="Home > Z Clearance"
    SET_KINEMATIC_POSITION X=0 Y=0 Z=0
    G91
    G0 Z5
    G90
  {% endif %}

  {% if do_y == 1 %}
    RESPOND PREFIX="info" MSG="Home > Y"
    G90
    G990028 Y0
  {% endif %}

  {% if do_x == 1 %}
    RESPOND PREFIX="info" MSG="Homing > X"
    G90
    G990028 X0
  {% endif %}

  {% if do_z == 1 %}
    RESPOND PREFIX="info" MSG="Homing > Z"
    G90
    G0 X{printer.configfile.settings.safe_z_home.home_xy_position[0]} Y{printer.configfile.settings.safe_z_home.home_xy_position[1]} F4000
    G990028 Z0
  {% endif %}

  RESPOND PREFIX="info" MSG="Homing > Done"


# Macro for setting the position to fake values
[gcode_macro FAKE_POSITION]
description: Trick the printer into thinking the given axes are at zero
gcode:
  {% set do_x = false %}
  {% set do_y = false %}
  {% set do_z = false %}

  {% if params.X is defined %}
    {% set do_x = true %}
  {% endif %}

  {% if params.Y is defined %}
    {% set do_y = true %}
  {% endif %}

  {% if params.Z is defined %}
    {% set do_z = true %}
  {% endif %}

  {% if do_x == false and do_y == false and do_z == false %}
    {% set do_x = true %}
    {% set do_y = true %}
    {% set do_z = true %}
  {% endif %}

  {% if do_x == true and do_y == false and do_z == false %}
    SET_KINEMATIC_POSITION X=0
  {% endif %}

  {% if do_x == false and do_y == true and do_z == false %}
    SET_KINEMATIC_POSITION Y=0
  {% endif %}

  {% if do_x == false and do_y == false and do_z == true %}
    SET_KINEMATIC_POSITION Z=0
  {% endif %}

  {% if do_x == true and do_y == true and do_z == false %}
    SET_KINEMATIC_POSITION X=0 Y=0
  {% endif %}

  {% if do_x == true and do_y == true and do_z == true %}
    SET_KINEMATIC_POSITION X=0 Y=0 Z=0
  {% endif %}


# Start of print
[gcode_macro START_PRINT]
description: Handles things that need to happen at the start of a print
gcode:
  M117
  RESPOND MSG="Getting ready to print..."

  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set Y_AXIS_SIZE = printer.toolhead.axis_maximum.y|default(100)|float %}

  M220 S100 # Reset the feedrate
  M221 S100 # Reset the flowrate
  M140 S{BED_TEMP} # Start preheating the bed
  M104 S{EXTRUDER_TEMP} T0 # Start preheating the hotend
  M105 # Report temperatures
  M190 S{BED_TEMP} # Wait for the bed to reach the desired temp
  M109 S{EXTRUDER_TEMP} T0 # Wait for the hotend to reach the desired temp
  G28 # Home all the axes
  Z_TILT_ADJUST # Adjust the Z steppers to make the bed level
  #BED_MESH_CALIBRATE # Adaptive bed mesh compensation
  G92 E0 # Reset the extruder
  #LINE_PURGE # Prime the nozzle
  G1 Z2.0 F3000 # Move the Z axis up a little
  G1 X0.0 Y0.0 Z0.28 F5000.0 # Move to the nozzle-priming position
  G1 X0.0 Y{Y_AXIS_SIZE * 0.67} Z0.28 F1500.0 E15 # Draw the first nozzle-priming line
  G1 X0.9 Y{Y_AXIS_SIZE * 0.67} Z0.28 F5000.0 # Move the extruder to the side a little
  G1 X0.9 Y0.0 Z0.28 F1500.0 E30 # Draw the second nozzle-priming line
  G92 E0 # Reset the extruder
  G1 Z2.0 F3000 # Move the Z axis up a little

  RESPOND MSG="Now printing..."


# End of print
[gcode_macro END_PRINT]
description: Handles things that need to happen at the end of a print
gcode:
  G91 # Change to relative positioning
  G1 E-25 Z10 F2400 # Retract the filament and raise the Z axis
  G90 # Change to absolute positioning
  G28 X0 Y0 # Home the X and Y axes
  G0 X10 Y10 F1500 # Move away from the endstop switches
  M106 S0 # Turn off the part-cooling fan
  M104 S0 # Turn off the hotend
  M140 S0 # Turn off the bed
  M84 # Disable all the motors

  RESPOND MSG="Print ended..."


# Macro for filament runout
[gcode_macro FILAMENT_RUNOUT]
description: Handles filament runout
gcode:
  M300 S1 P10
  M600
  M300 S1 P10


# Macro to disable filament runout sensor
[gcode_macro DISABLE_FILAMENT_SENSOR]
description: Disable filament runout sensor
gcode:
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0


# Macro to trigger a beeper
[gcode_macro M300]
description: Trigger a beeper
gcode:
  {% set S = params.S|default(1000)|int %}
  {% set P = params.P|default(100)|int %}
    SET_PIN PIN=beeper VALUE=1.00 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
  G4 P{P}
    SET_PIN PIN=beeper VALUE=0.00


# Macro for filament change
[gcode_macro M600]
description: Handles changing of filament
gcode:
  {% set X = params.X|default(25)|float %}
  {% set Y = params.Y|default(25)|float %}
  {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
  G91
  G1 E-.8 F2700
  G1 Z{Z}
  G90
  G1 X{X} Y{Y} F3000
  G91
  G1 E-15 F1000
    RESTORE_GCODE_STATE NAME=M600_state


# Macro to calculate the probe min/max/current coordinates
[gcode_macro GET_PROBE_LIMITS]
description: Calculates the probe min/max/current coordinates
gcode: 
  # Find probe config in configfile
  {% if printer.configfile.config["bltouch"] %}
    # bltouch section found
    {% set probe = printer.configfile.config["bltouch"] %}
    {% set has_probe = True %}
  {% elif printer.configfile.config["probe"] %}
    # probe section found
    {% set probe = printer.configfile.config["probe"] %}
    {% set has_probe = True %}
  {% else %}
    # No probe or bltouch sections found
    RESPOND MSG="Failed to detect probe in configfile"
  {% endif %}

  # only do the rest if we have a probe to work with
  {% if has_probe %}

    {% set stepperx = printer.configfile.config["stepper_x"] %}
    {% set steppery = printer.configfile.config["stepper_y"] %}
    {% set xprobemin = stepperx["position_min"]|float + probe["x_offset"]|float %} 
    {% set xprobemax = stepperx["position_max"]|float + probe["x_offset"]|float %} 
    {% set yprobemin = steppery["position_min"]|float + probe["y_offset"]|float %} 
    {% set yprobemax = steppery["position_max"]|float + probe["y_offset"]|float %}

    RESPOND MSG="Minimum PROBE position X={xprobemin} Y={yprobemin}" 
    RESPOND MSG="Maximum PROBE position X={xprobemax} Y={yprobemax}"

    # check if printer homed
    {% if "xyz" in printer.toolhead.homed_axes %} 
      {% set curprobex = printer.toolhead.position.x|float + probe["x_offset"]|float %} 
      {% set curprobey = printer.toolhead.position.y|float + probe["y_offset"]|float %} 
      RESPOND MSG="Current PROBE position X={curprobex} Y={curprobey}"
    {% endif %}
  {% endif %}
